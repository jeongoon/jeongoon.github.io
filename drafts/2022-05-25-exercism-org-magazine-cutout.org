---
title: Exercism - Rust - Magazine Cu Out
description: my magazine cut out soloution at exercism.org
keywords: rust, closure, function
author: Myoungjin Jeon
---

#+OPTIONS: ^:{}



** Introductions

***  latest version: found at [[https://exercism.org/tracks/rust/exercises/magazine-cutout][here]].

 In this exercise you'll be using a HashMap, along with entry API methods,
 to solve a simple algorithm problem.

 Given &[&str] representing the words of a magazine article, and &[&str] representing
 the words of a note you would like to send, can you compose your note by cutting words
 out of the magazine and pasting them into a letter?

***  Notes:
#+begin_quote
This implies physical cutting and pasting; the magazine needs to contain at least
as many copies of each word as the note requires.
Capitalization matters; just because you're pasting together a note composed from
words of a magazine doesn't mean you're willing to be ungrammatical.
#+end_quote

You'll start with the following stubbed function signature:
#+begin_src rust
pub fn can_construct_note(magazine: &[&str], note: &[&str]) -> bool {
    unimplemented!()
}  
#+end_src

Given the following input
#+begin_src rust
let magazine = "two times three is not four".split_whitespace().collect::<Vec<&str>>();
let note = "two times two is four".split_whitespace().collect::<Vec<&str>>();
assert!(!can_construct_note(&magazine, &note));
#+end_src

The function returns false since the magazine only contains one instance of "two"
when the note requires two of them.

The following input will succeed:
#+begin_src rust
let magazine = "Astronomer Amy Mainzer spent hours chatting with Leonardo DiCaprio for Netflix's 'Don't Look Up'".split_whitespace().collect::<Vec<&str>>();
let note = "Amy Mainzer chatting with Leonardo DiCaprio."
    .split_whitespace()
    .collect::<Vec<&str>>();
assert!(can_construct_note(&magazine, &note));
#+end_src

** Incorrect Introduction
 If introduction is correct, most of other's solution are not working, however they seem get passed the test
 codes, I think there might be some mistakes on =.split_whitespace()= function. because /DiCaprio/ in last example
 code, it will be devided into:

#+begin_src rust
["Amy", "Mainzer", "chatting", "with", "Leonardo", "DiCaprio."]
#+end_src

 Please note on punctuation in /"DiCaprio."/ and below code is an example solution from community.

 credit: https://exercism.org/tracks/rust/exercises/magazine-cutout/solutions/surfingtomchen

#+begin_src rust
use std::collections::HashMap;
pub fn can_construct_note(magazine: &[&str], note: &[&str]) -> bool {
    let magazine_words = magazine.iter().fold(HashMap::new(), |mut words, str| {
        *words.entry(str).or_insert(0) += 1;
        words
    });
    let note_words = note.iter().fold(HashMap::new(), |mut words, str| {
        *words.entry(str).or_insert(0) += 1;
        words
    });
    note_words
        .iter()
        .all(&|(w, count)| magazine_words.get(w).unwrap_or(&0) >= count)
}
#+end_src

  This is really clean code in my opinion, however the test code given in introduction doesn't allow pass
  this code.

#+begin_src shell
thread 'main' panicked at 'assertion failed: can_construct_note2(&magazine, &note)', src/main.rs:57:5
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

cargo-run exited abnormally with code 101 at Wed May 25 22:29:47
#+end_src


** My first try

** Closure is easier

** Lifetime??
** local function will be like
